---
globals:
  - id: gdo_err_margin
    type: float
    restore_value: yes
    initial_value: $open_garage_door_distance_margin_of_error

sensor:
  - platform: zio_ultrasonic
    update_interval: 1s
    id: garage_door_range_sensor
    name: "Garage Door Range Sensor"
    accuracy_decimals: 2
    entity_category: diagnostic
    address: 0x2F
    unit_of_measurement: m
    filters:
      - multiply: 0.001
      - timeout: 4s
      - lambda: |-
          if (x == 0.0) {
            return NAN;
          } else {
            return x;
          }
      - throttle_average: 2s
      - round: 2

number:
  - platform: template
    name: Distance sensor calibration
    id: open_garage_door_distance_from_ceiling
    icon: mdi:ruler
    entity_category: config
    unit_of_measurement: m
    device_class: distance
    step: 0.01
    max_value: 2.0
    min_value: 0.1
    optimistic: true
    restore_value: true

button:
  - platform: template
    id: calibrate_open_garage
    name: Calibrate Open Garage Distance
    entity_category: config
    on_press:
      then:
        - number.set:
            id: open_garage_door_distance_from_ceiling
            value: !lambda return id(garage_door_range_sensor).state;
        - logger.log:
              format: "Calibrated distance: %f"
              args: [ id(open_garage_door_distance_from_ceiling).state ]

api:
  actions:
    - action: calibrate_open_garage
      then:
        - number.set:
            id: open_garage_door_distance_from_ceiling
            value: !lambda return id(garage_door_range_sensor).state;

binary_sensor:
  - platform: template
    id: garage_door_open_state
    name: Garage Door Open State
    internal: true
    lambda: |-
      float calibrated_distance = id(open_garage_door_distance_from_ceiling).state;
      float current_distance = id(garage_door_range_sensor).state;
      if (std::isnan(current_distance) || current_distance > calibrated_distance + id(gdo_err_margin)) {
        return false;
      } else {
        return true;
      }
    on_state:
      if:
        condition:
          lambda: 'return id(garage_door_open_state).state;'
        then:
          - logger.log:
              format: "Garage door is open"
              level: INFO
          - cover.template.publish:
              id: garage_door_cover
              state: OPEN
          - cover.template.publish:
              id: garage_door_cover
              current_operation: IDLE
        else:
          - logger.log:
              format: "Garage door is closed"
              level: INFO
          - cover.template.publish:
              id: garage_door_cover
              state: CLOSED
          - cover.template.publish:
              id: garage_door_cover
              current_operation: IDLE
